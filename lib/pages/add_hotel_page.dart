// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:hotel_booking_app/model/hotel.dart';
// import 'package:hotel_booking_app/model/location.dart';

// class AdminHotelAddPage extends StatefulWidget {
//   @override
//   _AdminHotelAddPageState createState() => _AdminHotelAddPageState();
// }

// class _AdminHotelAddPageState extends State<AdminHotelAddPage> {
//   final TextEditingController _nameController = TextEditingController();
//   final TextEditingController _ratingController = TextEditingController();
//   final TextEditingController _descriptionController = TextEditingController();
//   String? _selectedLocationId;
//   List<Location> _locations = [];

//   @override
//   void initState() {
//     super.initState();
//     _fetchLocations();
//   }

//   Future<void> _fetchLocations() async {
//     final snapshot = await FirebaseFirestore.instance.collection('locations').get();
//     setState(() {
//       _locations = snapshot.docs.map((doc) => Location(id: doc.id, name: doc['name'])).toList();
//     });
//   }

//   Future<void> _addHotel() async {
//     final name = _nameController.text;
//     final rating = double.tryParse(_ratingController.text) ?? 0.0;
//     final description = _descriptionController.text;

//     if (name.isNotEmpty && _selectedLocationId != null) {
//       // Create a new hotel object
//       final hotel = Hotel(
//         id: '', // ID will be generated by Firestore
//         name: name,
//         locationId: _selectedLocationId!,
//         rating: rating,
//         description: description,
//         amenities: [], // Add amenities if needed
//       );

//       // Add hotel to Firestore
//       DocumentReference docRef = await FirebaseFirestore.instance.collection('hotels').add(hotel.toMap());

//       // Update the hotel with the generated ID
//       await docRef.update({'hotelId': docRef.id});

//       // Clear the fields
//       _nameController.clear();
//       _ratingController.clear();
//       _descriptionController.clear();
//       _selectedLocationId = null;

//       ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Hotel added successfully!')));
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: Text('Add Hotel')),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           children: [
//             DropdownButton<String>(
//               hint: Text('Select Location'),
//               value: _selectedLocationId,
//               onChanged: (String? newValue) {
//                 setState(() {
//                   _selectedLocationId = newValue;
//                 });
//               },
//               items: _locations.map((location) {
//                 return DropdownMenuItem<String>(
//                   value: location.id,
//                   child: Text(location.name),
//                 );
//               }).toList(),
//             ),
//             TextField(
//               controller: _nameController,
//               decoration: InputDecoration(labelText: 'Hotel Name'),
//             ),
//             TextField(
//               controller: _ratingController,
//               decoration: InputDecoration(labelText: 'Rating'),
//               keyboardType: TextInputType.number,
//             ),
//             TextField(
//               controller: _descriptionController,
//               decoration: InputDecoration(labelText: 'Description'),
//             ),
//             SizedBox(height: 20),
//             ElevatedButton(
//               onPressed: _addHotel,
//               child: Text('Add Hotel'),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }

// import 'dart:io'; // Import for File operations
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:image_picker/image_picker.dart'; // Import for image picking
// import 'package:path_provider/path_provider.dart'; // Import for local storage path
// import 'package:hotel_booking_app/model/hotel.dart';
// import 'package:hotel_booking_app/model/location.dart';

// class AdminHotelAddPage extends StatefulWidget {
//   const AdminHotelAddPage({super.key}); // Added Key parameter

//   @override
//   _AdminHotelAddPageState createState() => _AdminHotelAddPageState();
// }

// class _AdminHotelAddPageState extends State<AdminHotelAddPage> {
//   final TextEditingController _nameController = TextEditingController();
//   final TextEditingController _ratingController = TextEditingController();
//   final TextEditingController _descriptionController = TextEditingController();
//   final TextEditingController _amenitiesController =
//       TextEditingController(); // New controller for amenities
//   String? _selectedLocationId;
//   List<Location> _locations = [];
//   File? _imageFile; // To store the selected image file

//   final ImagePicker _picker = ImagePicker(); // Image picker instance

//   @override
//   void initState() {
//     super.initState();
//     _fetchLocations();
//   }

//   @override
//   void dispose() {
//     _nameController.dispose();
//     _ratingController.dispose();
//     _descriptionController.dispose();
//     _amenitiesController.dispose(); // Dispose new controller
//     super.dispose();
//   }

//   Future<void> _fetchLocations() async {
//     try {
//       final snapshot =
//           await FirebaseFirestore.instance.collection('locations').get();
//       setState(() {
//         _locations = snapshot.docs
//             .map((doc) => Location(id: doc.id, name: doc['name']))
//             .toList();
//       });
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Error fetching locations: $e')),
//       );
//     }
//   }

//   Future<void> _pickImage() async {
//     final XFile? pickedFile = await _picker.pickImage(source: ImageSource.gallery);
//     if (pickedFile != null) {
//       setState(() {
//         _imageFile = File(pickedFile.path);
//       });
//     }
//   }

//   Future<void> _addHotel() async {
//     final name = _nameController.text.trim();
//     final rating = double.tryParse(_ratingController.text) ?? 0.0;
//     final description = _descriptionController.text.trim();
//     final amenitiesRaw = _amenitiesController.text.trim();
//     final List<String> amenities = amenitiesRaw.split(',').map((e) => e.trim()).where((e) => e.isNotEmpty).toList();

//     if (name.isEmpty || _selectedLocationId == null) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(content: Text('Please fill in hotel name and select a location.')),
//       );
//       return;
//     }

//     try {
//       // Create a new hotel object without ID, Firestore will generate it.
//       // We will update the 'hotelId' field after getting the generated ID.
//       final hotel = Hotel(
//         id: '', // Placeholder, will be updated with actual doc.id
//         name: name,
//         locationId: _selectedLocationId!,
//         rating: rating,
//         description: description,
//         amenities: amenities,
//       );

//       // Add hotel to Firestore
//       DocumentReference docRef = await FirebaseFirestore.instance.collection('hotels').add(hotel.toMap());

//       // Save image locally using the Firestore generated ID
//       if (_imageFile != null) {
//         final directory = await getApplicationDocumentsDirectory();
//         // Create a unique filename using the Firestore document ID
//         final localImagePath = '${directory.path}/${docRef.id}.png';
//         await _imageFile!.copy(localImagePath);
//         debugPrint('Image saved locally to: $localImagePath');
//       }

//       // Update the hotel document with its own Firestore ID
//       await docRef.update({'hotelId': docRef.id}); // This updates the field named 'hotelId' in the document itself

//       // Clear the fields and image
//       _nameController.clear();
//       _ratingController.clear();
//       _descriptionController.clear();
//       _amenitiesController.clear();
//       setState(() {
//         _selectedLocationId = null;
//         _imageFile = null;
//       });

//       ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Hotel added successfully!')));
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Failed to add hotel: $e')),
//       );
//       debugPrint('Error adding hotel: $e');
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Add Hotel', style: TextStyle(color: Colors.white)),
//         backgroundColor: Colors.blue,
//         iconTheme: const IconThemeData(color: Colors.white),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: SingleChildScrollView(
//           child: Column(
//             children: [
//               DropdownButtonFormField<String>(
//                 decoration: const InputDecoration(
//                   labelText: 'Select Location',
//                   border: OutlineInputBorder(),
//                 ),
//                 hint: const Text('Select Location'),
//                 value: _selectedLocationId,
//                 onChanged: (String? newValue) {
//                   setState(() {
//                     _selectedLocationId = newValue;
//                   });
//                 },
//                 items: _locations.map((location) {
//                   return DropdownMenuItem<String>(
//                     value: location.id,
//                     child: Text(location.name),
//                   );
//                 }).toList(),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _nameController,
//                 decoration: const InputDecoration(
//                     labelText: 'Hotel Name', border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _ratingController,
//                 decoration: const InputDecoration(
//                     labelText: 'Rating (e.g., 4.5)',
//                     border: OutlineInputBorder()),
//                 keyboardType: TextInputType.number,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _descriptionController,
//                 decoration: const InputDecoration(
//                     labelText: 'Description', border: OutlineInputBorder()),
//                 maxLines: 3,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _amenitiesController,
//                 decoration: const InputDecoration(
//                     labelText: 'Amenities (comma-separated, e.g., Wi-Fi, Pool)',
//                     border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               _imageFile == null
//                   ? const Text('No image selected.')
//                   : Image.file(_imageFile!, height: 150),
//               const SizedBox(height: 16),
//               ElevatedButton.icon(
//                 onPressed: _pickImage,
//                 icon: const Icon(Icons.image),
//                 label: const Text('Pick Hotel Image'),
//               ),
//               const SizedBox(height: 20),
//               ElevatedButton(
//                 onPressed: _addHotel,
//                 style: ElevatedButton.styleFrom(
//                   backgroundColor: Colors.blue,
//                   foregroundColor: Colors.white,
//                   minimumSize: const Size.fromHeight(50), // Make button full width
//                   shape: RoundedRectangleBorder(
//                     borderRadius: BorderRadius.circular(8),
//                   ),
//                 ),
//                 child: const Text('Add Hotel', style: TextStyle(fontSize: 18)),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }

// import 'dart:io'; // Import for File operations
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:image_picker/image_picker.dart'; // Import for image picking
// import 'package:path_provider/path_provider.dart'; // Import for local storage path
// import 'package:hotel_booking_app/model/hotel.dart';
// import 'package:hotel_booking_app/model/location.dart'; // Ensure this model exists

// class AdminHotelAddPage extends StatefulWidget {
//   const AdminHotelAddPage({super.key});

//   @override
//   _AdminHotelAddPageState createState() => _AdminHotelAddPageState();
// }

// class _AdminHotelAddPageState extends State<AdminHotelAddPage> {
//   final TextEditingController _nameController = TextEditingController();
//   final TextEditingController _ratingController = TextEditingController();
//   final TextEditingController _descriptionController = TextEditingController();
//   final TextEditingController _amenitiesController =
//       TextEditingController(); // New controller for amenities
//   String? _selectedLocationId;
//   List<Location> _locations = [];
//   File? _imageFile; // To store the selected image file

//   final ImagePicker _picker = ImagePicker(); // Image picker instance

//   @override
//   void initState() {
//     super.initState();
//     _fetchLocations();
//   }

//   @override
//   void dispose() {
//     _nameController.dispose();
//     _ratingController.dispose();
//     _descriptionController.dispose();
//     _amenitiesController.dispose(); // Dispose new controller
//     super.dispose();
//   }

//   Future<void> _fetchLocations() async {
//     try {
//       final snapshot =
//           await FirebaseFirestore.instance.collection('locations').get();
//       setState(() {
//         _locations = snapshot.docs
//             .map((doc) => Location(id: doc.id, name: doc['name']))
//             .toList();
//       });
//     } catch (e) {
//       debugPrint('Error fetching locations: $e'); // Use debugPrint
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Error fetching locations: $e')),
//       );
//     }
//   }

//   Future<void> _pickImage() async {
//     final XFile? pickedFile = await _picker.pickImage(source: ImageSource.gallery);
//     if (pickedFile != null) {
//       setState(() {
//         _imageFile = File(pickedFile.path);
//       });
//       debugPrint('Image picked from: ${pickedFile.path}'); // Debug print
//     }
//   }

//   Future<void> _addHotel() async {
//     final name = _nameController.text.trim();
//     final rating = double.tryParse(_ratingController.text) ?? 0.0;
//     final description = _descriptionController.text.trim();
//     final amenitiesRaw = _amenitiesController.text.trim();
//     final List<String> amenities = amenitiesRaw.split(',').map((e) => e.trim()).where((e) => e.isNotEmpty).toList();

//     if (name.isEmpty || _selectedLocationId == null) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(content: Text('Please fill in hotel name and select a location.')),
//       );
//       return;
//     }

//     try {
//       // Create a new hotel object without ID, Firestore will generate it.
//       final hotel = Hotel(
//         id: '', // Placeholder, will be updated with actual doc.id
//         name: name,
//         locationId: _selectedLocationId!,
//         rating: rating,
//         description: description,
//         amenities: amenities,
//       );

//       // Add hotel to Firestore
//       DocumentReference docRef = await FirebaseFirestore.instance.collection('hotels').add(hotel.toMap());
//       debugPrint('Hotel added to Firestore with ID: ${docRef.id}'); // Debug print

//       // Save image locally using the Firestore generated ID
//       if (_imageFile != null) {
//         final directory = await getApplicationDocumentsDirectory();
//         // Create a unique filename using the Firestore document ID
//         final localImagePath = '${directory.path}/${docRef.id}.png';
//         await _imageFile!.copy(localImagePath);
//         debugPrint('Image saved locally to: $localImagePath'); // Debug print
//       } else {
//         debugPrint('No image selected for hotel ID: ${docRef.id}'); // Debug print
//       }

//       // No need to update 'hotelId' field if you are using doc.id directly everywhere.
//       // If you specifically need a field named 'hotelId' within the document, uncomment below:
//       // await docRef.update({'hotelId': docRef.id});

//       // Clear the fields and image
//       _nameController.clear();
//       _ratingController.clear();
//       _descriptionController.clear();
//       _amenitiesController.clear();
//       setState(() {
//         _selectedLocationId = null;
//         _imageFile = null;
//       });

//       ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Hotel added successfully!')));
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Failed to add hotel: $e')),
//       );
//       debugPrint('Error adding hotel: $e'); // Use debugPrint
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Add Hotel', style: TextStyle(color: Colors.white)),
//         backgroundColor: Colors.blue,
//         iconTheme: const IconThemeData(color: Colors.white),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: SingleChildScrollView(
//           child: Column(
//             children: [
//               DropdownButtonFormField<String>(
//                 decoration: const InputDecoration(
//                   labelText: 'Select Location',
//                   border: OutlineInputBorder(),
//                 ),
//                 hint: const Text('Select Location'),
//                 value: _selectedLocationId,
//                 onChanged: (String? newValue) {
//                   setState(() {
//                     _selectedLocationId = newValue;
//                   });
//                 },
//                 items: _locations.map((location) {
//                   return DropdownMenuItem<String>(
//                     value: location.id,
//                     child: Text(location.name),
//                   );
//                 }).toList(),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _nameController,
//                 decoration: const InputDecoration(
//                     labelText: 'Hotel Name', border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _ratingController,
//                 decoration: const InputDecoration(
//                     labelText: 'Rating (e.g., 4.5)',
//                     border: OutlineInputBorder()),
//                 keyboardType: TextInputType.number,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _descriptionController,
//                 decoration: const InputDecoration(
//                     labelText: 'Description', border: OutlineInputBorder()),
//                 maxLines: 3,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _amenitiesController,
//                 decoration: const InputDecoration(
//                     labelText: 'Amenities (comma-separated, e.g., Wi-Fi, Pool)',
//                     border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               _imageFile == null
//                   ? const Text('No image selected.')
//                   : Image.file(_imageFile!, height: 150, fit: BoxFit.cover),
//               const SizedBox(height: 16),
//               ElevatedButton.icon(
//                 onPressed: _pickImage,
//                 icon: const Icon(Icons.image),
//                 label: const Text('Pick Hotel Image'),
//               ),
//               const SizedBox(height: 20),
//               ElevatedButton(
//                 onPressed: _addHotel,
//                 style: ElevatedButton.styleFrom(
//                   backgroundColor: Colors.blue,
//                   foregroundColor: Colors.white,
//                   minimumSize: const Size.fromHeight(50), // Make button full width
//                   shape: RoundedRectangleBorder(
//                     borderRadius: BorderRadius.circular(8),
//                   ),
//                 ),
//                 child: const Text('Add Hotel', style: TextStyle(fontSize: 18)),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }

// import 'dart:io'; // Still needed for picking the image temporarily
// import 'dart:typed_data'; // For Uint8List
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:image_picker/image_picker.dart';
// import 'package:hive_flutter/hive_flutter.dart'; // Import Hive
// import 'package:hotel_booking_app/model/hotel.dart';
// import 'package:hotel_booking_app/model/location.dart';

// class AddHotelPage extends StatefulWidget {
//   const AddHotelPage({super.key});

//   @override
//   _AddHotelPageState createState() => _AddHotelPageState();
// }

// class _AddHotelPageState extends State<AddHotelPage> {
//   final TextEditingController _nameController = TextEditingController();
//   final TextEditingController _ratingController = TextEditingController();
//   final TextEditingController _descriptionController = TextEditingController();
//   final TextEditingController _amenitiesController = TextEditingController();
//   String? _selectedLocationId;
//   List<Location> _locations = [];
//   File?
//       _imageFile; // Temporary file to hold selected image before saving to Hive

//   final ImagePicker _picker = ImagePicker();

//   @override
//   void initState() {
//     super.initState();
//     _fetchLocations();
//   }

//   @override
//   void dispose() {
//     _nameController.dispose();
//     _ratingController.dispose();
//     _descriptionController.dispose();
//     _amenitiesController.dispose();
//     super.dispose();
//   }

//   Future<void> _fetchLocations() async {
//     try {
//       final snapshot =
//           await FirebaseFirestore.instance.collection('locations').get();
//       setState(() {
//         _locations = snapshot.docs
//             .map((doc) => Location(id: doc.id, name: doc['name']))
//             .toList();
//       });
//     } catch (e) {
//       debugPrint('Error fetching locations: $e');
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Error fetching locations: $e')),
//       );
//     }
//   }

//   Future<void> _pickImage() async {
//     final XFile? pickedFile =
//         await _picker.pickImage(source: ImageSource.gallery);
//     if (pickedFile != null) {
//       setState(() {
//         _imageFile = File(pickedFile.path);
//       });
//       debugPrint('Image picked from: ${pickedFile.path}');
//     }
//   }

//   Future<void> _addHotel() async {
//     final name = _nameController.text.trim();
//     final rating = double.tryParse(_ratingController.text) ?? 0.0;
//     final description = _descriptionController.text.trim();
//     final amenitiesRaw = _amenitiesController.text.trim();
//     final List<String> amenities = amenitiesRaw
//         .split(',')
//         .map((e) => e.trim())
//         .where((e) => e.isNotEmpty)
//         .toList();

//     if (name.isEmpty || _selectedLocationId == null) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(
//             content: Text('Please fill in hotel name and select a location.')),
//       );
//       return;
//     }

//     try {
//       final hotel = Hotel(
//         id: '',
//         name: name,
//         locationId: _selectedLocationId!,
//         rating: rating,
//         description: description,
//         amenities: amenities,
//       );

//       // Add hotel to Firestore
//       DocumentReference docRef = await FirebaseFirestore.instance
//           .collection('hotels')
//           .add(hotel.toMap());
//       debugPrint('Hotel added to Firestore with ID: ${docRef.id}');

//       // Store image bytes in Hive using the Firestore generated ID
//       if (_imageFile != null) {
//         final Uint8List imageBytes = await _imageFile!.readAsBytes();
//         final hotelImagesBox = Hive.box<Uint8List>('hotel_images');
//         await hotelImagesBox.put(docRef.id, imageBytes);
//         debugPrint('Image bytes saved to Hive with key: ${docRef.id}');
//       } else {
//         debugPrint('No image selected for hotel ID: ${docRef.id}');
//       }

//       // Clear the fields and image
//       _nameController.clear();
//       _ratingController.clear();
//       _descriptionController.clear();
//       _amenitiesController.clear();
//       setState(() {
//         _selectedLocationId = null;
//         _imageFile = null;
//       });

//       ScaffoldMessenger.of(context).showSnackBar(
//           const SnackBar(content: Text('Hotel added successfully!')));
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Failed to add hotel: $e')),
//       );
//       debugPrint('Error adding hotel: $e');
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Add Hotel', style: TextStyle(color: Colors.white)),
//         backgroundColor: Colors.blue,
//         iconTheme: const IconThemeData(color: Colors.white),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: SingleChildScrollView(
//           child: Column(
//             children: [
//               DropdownButtonFormField<String>(
//                 decoration: const InputDecoration(
//                   labelText: 'Select Location',
//                   border: OutlineInputBorder(),
//                 ),
//                 hint: const Text('Select Location'),
//                 value: _selectedLocationId,
//                 onChanged: (String? newValue) {
//                   setState(() {
//                     _selectedLocationId = newValue;
//                   });
//                 },
//                 items: _locations.map((location) {
//                   return DropdownMenuItem<String>(
//                     value: location.id,
//                     child: Text(location.name),
//                   );
//                 }).toList(),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _nameController,
//                 decoration: const InputDecoration(
//                     labelText: 'Hotel Name', border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _ratingController,
//                 decoration: const InputDecoration(
//                     labelText: 'Rating (e.g., 4.5)',
//                     border: OutlineInputBorder()),
//                 keyboardType: TextInputType.number,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _descriptionController,
//                 decoration: const InputDecoration(
//                     labelText: 'Description', border: OutlineInputBorder()),
//                 maxLines: 3,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _amenitiesController,
//                 decoration: const InputDecoration(
//                     labelText: 'Amenities (comma-separated, e.g., Wi-Fi, Pool)',
//                     border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               _imageFile == null
//                   ? const Text('No image selected.')
//                   : Image.file(_imageFile!, height: 150, fit: BoxFit.cover),
//               const SizedBox(height: 16),
//               ElevatedButton.icon(
//                 onPressed: _pickImage,
//                 icon: const Icon(Icons.image),
//                 label: const Text('Pick Hotel Image'),
//               ),
//               const SizedBox(height: 20),
//               ElevatedButton(
//                 onPressed: _addHotel,
//                 style: ElevatedButton.styleFrom(
//                   backgroundColor: Colors.blue,
//                   foregroundColor: Colors.white,
//                   minimumSize: const Size.fromHeight(50),
//                   shape: RoundedRectangleBorder(
//                     borderRadius: BorderRadius.circular(8),
//                   ),
//                 ),
//                 child: const Text('Add Hotel', style: TextStyle(fontSize: 18)),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }

// import 'dart:io';
// import 'dart:typed_data'; // For Uint8List
// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:image_picker/image_picker.dart';
// import 'package:hive_flutter/hive_flutter.dart';
// import 'package:hotel_booking_app/model/hotel.dart';
// import 'package:hotel_booking_app/model/location.dart';

// class AddHotelPage extends StatefulWidget {
//   const AddHotelPage({super.key});

//   @override
//   _AddHotelPageState createState() => _AddHotelPageState();
// }

// class _AddHotelPageState extends State<AddHotelPage> {
//   final TextEditingController _nameController = TextEditingController();
//   final TextEditingController _ratingController = TextEditingController();
//   final TextEditingController _descriptionController = TextEditingController();
//   final TextEditingController _amenitiesController = TextEditingController();
//   String? _selectedLocationId;
//   List<Location> _locations = [];
//   Uint8List? _imageBytes; // Changed from File? to Uint8List? for direct memory image

//   final ImagePicker _picker = ImagePicker();

//   @override
//   void initState() {
//     super.initState();
//     _fetchLocations();
//   }

//   @override
//   void dispose() {
//     _nameController.dispose();
//     _ratingController.dispose();
//     _descriptionController.dispose();
//     _amenitiesController.dispose();
//     super.dispose();
//   }

//   Future<void> _fetchLocations() async {
//     try {
//       final snapshot =
//           await FirebaseFirestore.instance.collection('locations').get();
//       setState(() {
//         _locations = snapshot.docs
//             .map((doc) => Location(id: doc.id, name: doc['name']))
//             .toList();
//       });
//     } catch (e) {
//       debugPrint('Error fetching locations: $e');
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Error fetching locations: $e')),
//       );
//     }
//   }

//   Future<void> _pickImage() async {
//     final XFile? pickedFile =
//         await _picker.pickImage(source: ImageSource.gallery);
//     if (pickedFile != null) {
//       final bytes = await pickedFile.readAsBytes();
//       setState(() {
//         _imageBytes = bytes; // Store bytes directly
//       });
//       debugPrint('Image picked from: ${pickedFile.path}, size: ${bytes.lengthInBytes} bytes');
//     } else {
//       debugPrint('Image picking cancelled.');
//     }
//   }

//   Future<void> _addHotel() async {
//     final name = _nameController.text.trim();
//     final rating = double.tryParse(_ratingController.text) ?? 0.0;
//     final description = _descriptionController.text.trim();
//     final amenitiesRaw = _amenitiesController.text.trim();
//     final List<String> amenities = amenitiesRaw
//         .split(',')
//         .map((e) => e.trim())
//         .where((e) => e.isNotEmpty)
//         .toList();

//     if (name.isEmpty || _selectedLocationId == null) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(
//             content: Text('Please fill in hotel name and select a location.')),
//       );
//       return;
//     }

//     try {
//       final hotel = Hotel(
//         id: '', // Placeholder, Firestore will generate
//         name: name,
//         locationId: _selectedLocationId!,
//         rating: rating,
//         description: description,
//         amenities: amenities,
//       );

//       DocumentReference docRef = await FirebaseFirestore.instance
//           .collection('hotels')
//           .add(hotel.toMap());
//       final hotelFirestoreId = docRef.id;
//       debugPrint('Hotel added to Firestore with ID: $hotelFirestoreId');

//       if (_imageBytes != null) {
//         final hotelImagesBox = Hive.box<Uint8List>('hotel_images');
//         await hotelImagesBox.put(hotelFirestoreId, _imageBytes!); // Save image bytes
//         debugPrint('Image bytes saved to Hive with key: $hotelFirestoreId');
//       } else {
//         debugPrint('No image selected for hotel ID: $hotelFirestoreId. Skipping Hive storage.');
//       }

//       _nameController.clear();
//       _ratingController.clear();
//       _descriptionController.clear();
//       _amenitiesController.clear();
//       setState(() {
//         _selectedLocationId = null;
//         _imageBytes = null; // Clear image bytes
//       });

//       ScaffoldMessenger.of(context).showSnackBar(
//           const SnackBar(content: Text('Hotel added successfully!')));
//     } catch (e) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text('Failed to add hotel: $e')),
//       );
//       debugPrint('Error adding hotel: $e');
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('Add Hotel', style: TextStyle(color: Colors.white)),
//         backgroundColor: Colors.blue,
//         iconTheme: const IconThemeData(color: Colors.white),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: SingleChildScrollView(
//           child: Column(
//             children: [
//               DropdownButtonFormField<String>(
//                 decoration: const InputDecoration(
//                   labelText: 'Select Location',
//                   border: OutlineInputBorder(),
//                 ),
//                 hint: const Text('Select Location'),
//                 value: _selectedLocationId,
//                 onChanged: (String? newValue) {
//                   setState(() {
//                     _selectedLocationId = newValue;
//                   });
//                 },
//                 items: _locations.map((location) {
//                   return DropdownMenuItem<String>(
//                     value: location.id,
//                     child: Text(location.name),
//                   );
//                 }).toList(),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _nameController,
//                 decoration: const InputDecoration(
//                     labelText: 'Hotel Name', border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _ratingController,
//                 decoration: const InputDecoration(
//                     labelText: 'Rating (e.g., 4.5)',
//                     border: OutlineInputBorder()),
//                 keyboardType: TextInputType.number,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _descriptionController,
//                 decoration: const InputDecoration(
//                     labelText: 'Description', border: OutlineInputBorder()),
//                 maxLines: 3,
//               ),
//               const SizedBox(height: 16),
//               TextField(
//                 controller: _amenitiesController,
//                 decoration: const InputDecoration(
//                     labelText: 'Amenities (comma-separated, e.g., Wi-Fi, Pool)',
//                     border: OutlineInputBorder()),
//               ),
//               const SizedBox(height: 16),
//               _imageBytes == null
//                   ? const Text('No image selected.')
//                   : Image.memory(_imageBytes!, height: 150, fit: BoxFit.cover), // Use Image.memory
//               const SizedBox(height: 16),
//               ElevatedButton.icon(
//                 onPressed: _pickImage,
//                 icon: const Icon(Icons.image),
//                 label: const Text('Pick Hotel Image'),
//               ),
//               const SizedBox(height: 20),
//               ElevatedButton(
//                 onPressed: _addHotel,
//                 style: ElevatedButton.styleFrom(
//                   backgroundColor: Colors.blue,
//                   foregroundColor: Colors.white,
//                   minimumSize: const Size.fromHeight(50),
//                   shape: RoundedRectangleBorder(
//                     borderRadius: BorderRadius.circular(8),
//                   ),
//                 ),
//                 child: const Text('Add Hotel', style: TextStyle(fontSize: 18)),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }

import 'dart:io';
import 'dart:typed_data'; // For Uint8List
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:hotel_booking_app/model/hotel.dart';
import 'package:hotel_booking_app/model/location.dart';

class AddHotelPage extends StatefulWidget {
  const AddHotelPage({super.key});

  @override
  _AddHotelPageState createState() => _AddHotelPageState();
}

class _AddHotelPageState extends State<AddHotelPage> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _ratingController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _amenitiesController = TextEditingController();
  String? _selectedLocationId;
  List<Location> _locations = [];
  Uint8List? _imageBytes; // Changed from File? to Uint8List? for direct memory image

  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    _fetchLocations();
  }

  @override
  void dispose() {
    _nameController.dispose();
    _ratingController.dispose();
    _descriptionController.dispose();
    _amenitiesController.dispose();
    super.dispose();
  }

  Future<void> _fetchLocations() async {
    try {
      final snapshot =
          await FirebaseFirestore.instance.collection('locations').get();
      setState(() {
        _locations = snapshot.docs
            .map((doc) => Location(id: doc.id, name: doc['name']))
            .toList();
      });
    } catch (e) {
      debugPrint('Error fetching locations: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching locations: $e')),
      );
    }
  }

  Future<void> _pickImage() async {
    final XFile? pickedFile =
        await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      final bytes = await pickedFile.readAsBytes();
      setState(() {
        _imageBytes = bytes; // Store bytes directly
      });
      debugPrint('Image picked from: ${pickedFile.path}, size: ${bytes.lengthInBytes} bytes');
    } else {
      debugPrint('Image picking cancelled.');
    }
  }

  Future<void> _addHotel() async {
    final name = _nameController.text.trim();
    final rating = double.tryParse(_ratingController.text) ?? 0.0;
    final description = _descriptionController.text.trim();
    final amenitiesRaw = _amenitiesController.text.trim();
    final List<String> amenities = amenitiesRaw
        .split(',')
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty)
        .toList();

    if (name.isEmpty || _selectedLocationId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Please fill in hotel name and select a location.')),
      );
      return;
    }

    try {
      final hotel = Hotel(
        id: '', // Placeholder, Firestore will generate
        name: name,
        locationId: _selectedLocationId!,
        rating: rating,
        description: description,
        amenities: amenities,
      );

      DocumentReference docRef = await FirebaseFirestore.instance
          .collection('hotels')
          .add(hotel.toMap());
      final hotelFirestoreId = docRef.id;
      debugPrint('Hotel added to Firestore with ID: $hotelFirestoreId');

      if (_imageBytes != null) {
        final hotelImagesBox = Hive.box<Uint8List>('hotel_images');
        await hotelImagesBox.put(hotelFirestoreId, _imageBytes!); // Save image bytes
        debugPrint('Image bytes saved to Hive with key: $hotelFirestoreId');
      } else {
        debugPrint('No image selected for hotel ID: $hotelFirestoreId. Skipping Hive storage.');
      }

      _nameController.clear();
      _ratingController.clear();
      _descriptionController.clear();
      _amenitiesController.clear();
      setState(() {
        _selectedLocationId = null;
        _imageBytes = null; // Clear image bytes
      });

      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Hotel added successfully!')));
      
      // IMPORTANT: Pop with 'true' to indicate success
      Navigator.pop(context, true); 

    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to add hotel: $e')),
      );
      debugPrint('Error adding hotel: $e');
      // Pop with 'false' to indicate failure or just pop without result
      Navigator.pop(context, false); 
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Hotel', style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.blue,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              DropdownButtonFormField<String>(
                decoration: const InputDecoration(
                  labelText: 'Select Location',
                  border: OutlineInputBorder(),
                ),
                hint: const Text('Select Location'),
                value: _selectedLocationId,
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedLocationId = newValue;
                  });
                },
                items: _locations.map((location) {
                  return DropdownMenuItem<String>(
                    value: location.id,
                    child: Text(location.name),
                  );
                }).toList(),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _nameController,
                decoration: const InputDecoration(
                    labelText: 'Hotel Name', border: OutlineInputBorder()),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _ratingController,
                decoration: const InputDecoration(
                    labelText: 'Rating (e.g., 4.5)',
                    border: OutlineInputBorder()),
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                    labelText: 'Description', border: OutlineInputBorder()),
                maxLines: 3,
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _amenitiesController,
                decoration: const InputDecoration(
                    labelText: 'Amenities (comma-separated, e.g., Wi-Fi, Pool)',
                    border: OutlineInputBorder()),
              ),
              const SizedBox(height: 16),
              _imageBytes == null
                  ? const Text('No image selected.')
                  : Image.memory(_imageBytes!, height: 150, fit: BoxFit.cover), // Use Image.memory
              const SizedBox(height: 16),
              ElevatedButton.icon(
                onPressed: _pickImage,
                icon: const Icon(Icons.image),
                label: const Text('Pick Hotel Image'),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _addHotel,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  minimumSize: const Size.fromHeight(50),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: const Text('Add Hotel', style: TextStyle(fontSize: 18)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

